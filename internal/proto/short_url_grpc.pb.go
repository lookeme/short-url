// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: short_url.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortenURLService_CreateShortURL_FullMethodName    = "/pb.ShortenURLService/CreateShortURL"
	ShortenURLService_GetByID_FullMethodName           = "/pb.ShortenURLService/GetByID"
	ShortenURLService_CreateShortBatch_FullMethodName  = "/pb.ShortenURLService/CreateShortBatch"
	ShortenURLService_GetAllUserURLs_FullMethodName    = "/pb.ShortenURLService/GetAllUserURLs"
	ShortenURLService_Ping_FullMethodName              = "/pb.ShortenURLService/Ping"
	ShortenURLService_DeleteByShortURLs_FullMethodName = "/pb.ShortenURLService/DeleteByShortURLs"
)

// ShortenURLServiceClient is the client API for ShortenURLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ShortenURLService provides an interface to operate on ShortenData.
type ShortenURLServiceClient interface {
	CreateShortURL(ctx context.Context, in *CreateAndSaveRequest, opts ...grpc.CallOption) (*CreateAndSaveResponse, error)
	GetByID(ctx context.Context, in *FindByURLRequest, opts ...grpc.CallOption) (*FindByURLResponse, error)
	CreateShortBatch(ctx context.Context, in *CreateAndSaveBatchRequest, opts ...grpc.CallOption) (*CreateAndSaveBatchResponse, error)
	GetAllUserURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindAllResponse, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseStatus, error)
	DeleteByShortURLs(ctx context.Context, in *DeleteByShortURLSRequest, opts ...grpc.CallOption) (*ResponseStatus, error)
}

type shortenURLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenURLServiceClient(cc grpc.ClientConnInterface) ShortenURLServiceClient {
	return &shortenURLServiceClient{cc}
}

func (c *shortenURLServiceClient) CreateShortURL(ctx context.Context, in *CreateAndSaveRequest, opts ...grpc.CallOption) (*CreateAndSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAndSaveResponse)
	err := c.cc.Invoke(ctx, ShortenURLService_CreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLServiceClient) GetByID(ctx context.Context, in *FindByURLRequest, opts ...grpc.CallOption) (*FindByURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByURLResponse)
	err := c.cc.Invoke(ctx, ShortenURLService_GetByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLServiceClient) CreateShortBatch(ctx context.Context, in *CreateAndSaveBatchRequest, opts ...grpc.CallOption) (*CreateAndSaveBatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAndSaveBatchResponse)
	err := c.cc.Invoke(ctx, ShortenURLService_CreateShortBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLServiceClient) GetAllUserURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindAllResponse)
	err := c.cc.Invoke(ctx, ShortenURLService_GetAllUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, ShortenURLService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenURLServiceClient) DeleteByShortURLs(ctx context.Context, in *DeleteByShortURLSRequest, opts ...grpc.CallOption) (*ResponseStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseStatus)
	err := c.cc.Invoke(ctx, ShortenURLService_DeleteByShortURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenURLServiceServer is the server API for ShortenURLService service.
// All implementations must embed UnimplementedShortenURLServiceServer
// for forward compatibility.
//
// ShortenURLService provides an interface to operate on ShortenData.
type ShortenURLServiceServer interface {
	CreateShortURL(context.Context, *CreateAndSaveRequest) (*CreateAndSaveResponse, error)
	GetByID(context.Context, *FindByURLRequest) (*FindByURLResponse, error)
	CreateShortBatch(context.Context, *CreateAndSaveBatchRequest) (*CreateAndSaveBatchResponse, error)
	GetAllUserURLs(context.Context, *emptypb.Empty) (*FindAllResponse, error)
	Ping(context.Context, *emptypb.Empty) (*ResponseStatus, error)
	DeleteByShortURLs(context.Context, *DeleteByShortURLSRequest) (*ResponseStatus, error)
	mustEmbedUnimplementedShortenURLServiceServer()
}

// UnimplementedShortenURLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortenURLServiceServer struct{}

func (UnimplementedShortenURLServiceServer) CreateShortURL(context.Context, *CreateAndSaveRequest) (*CreateAndSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedShortenURLServiceServer) GetByID(context.Context, *FindByURLRequest) (*FindByURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedShortenURLServiceServer) CreateShortBatch(context.Context, *CreateAndSaveBatchRequest) (*CreateAndSaveBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortBatch not implemented")
}
func (UnimplementedShortenURLServiceServer) GetAllUserURLs(context.Context, *emptypb.Empty) (*FindAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserURLs not implemented")
}
func (UnimplementedShortenURLServiceServer) Ping(context.Context, *emptypb.Empty) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenURLServiceServer) DeleteByShortURLs(context.Context, *DeleteByShortURLSRequest) (*ResponseStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByShortURLs not implemented")
}
func (UnimplementedShortenURLServiceServer) mustEmbedUnimplementedShortenURLServiceServer() {}
func (UnimplementedShortenURLServiceServer) testEmbeddedByValue()                           {}

// UnsafeShortenURLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenURLServiceServer will
// result in compilation errors.
type UnsafeShortenURLServiceServer interface {
	mustEmbedUnimplementedShortenURLServiceServer()
}

func RegisterShortenURLServiceServer(s grpc.ServiceRegistrar, srv ShortenURLServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortenURLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortenURLService_ServiceDesc, srv)
}

func _ShortenURLService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).CreateShortURL(ctx, req.(*CreateAndSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURLService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).GetByID(ctx, req.(*FindByURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURLService_CreateShortBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndSaveBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).CreateShortBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_CreateShortBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).CreateShortBatch(ctx, req.(*CreateAndSaveBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURLService_GetAllUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).GetAllUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_GetAllUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).GetAllUserURLs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURLService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenURLService_DeleteByShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByShortURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenURLServiceServer).DeleteByShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenURLService_DeleteByShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenURLServiceServer).DeleteByShortURLs(ctx, req.(*DeleteByShortURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenURLService_ServiceDesc is the grpc.ServiceDesc for ShortenURLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenURLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShortenURLService",
	HandlerType: (*ShortenURLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _ShortenURLService_CreateShortURL_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _ShortenURLService_GetByID_Handler,
		},
		{
			MethodName: "CreateShortBatch",
			Handler:    _ShortenURLService_CreateShortBatch_Handler,
		},
		{
			MethodName: "GetAllUserURLs",
			Handler:    _ShortenURLService_GetAllUserURLs_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ShortenURLService_Ping_Handler,
		},
		{
			MethodName: "DeleteByShortURLs",
			Handler:    _ShortenURLService_DeleteByShortURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "short_url.proto",
}
